use std::str::FromStr;
use crate::ast::*;

grammar;

pub Exprs: Vec<Ast> = {
    <v:(<Expr>)*> => v,
};

pub Expr: Ast = {
    "(" <Exprs> ")" => Ast::List(<>),
    "val" <ident:Term> ":Int" <val:Expr> => Ast::Var(ident, Box::new(val)),
    "defun" <ident:Term> "("<args:ParamList>")" ":Int" <list:Block> => Ast::Function(ident, args, list),
    "null" => Ast::Null,
    r";[^;\n\r]*" => Ast::Null,
    Term => Ast::Symbol(<>),
    Num => Ast::Int(<>),
};

pub Block: Vec<Ast> = {
    "(" <list:Expr*> ")" => list,
}

pub ParamList: Vec<String> = {
    () => vec![],
    <head:Term>":Int"=> vec![head],
    <head:Term>":Int" "," <tail:ParamList> => {
        let mut list = tail.clone();
        list.insert(0, head);

        list
    },
}

Term: String = {
    r#"[A-Za-z_?+*/.=<>-]+[0-9A-Za-z_?+*/.=<>-]*"# => (<>).to_owned()
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};
